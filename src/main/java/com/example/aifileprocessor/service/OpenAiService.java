package com.example.aifileprocessor.service;

import com.theokanning.openai.completion.CompletionRequest;
import com.theokanning.openai.service.OpenAiService as OpenAiApiServiceSdk; // Renamed to avoid confusion
import org.springframework.stereotype.Service;

import java.time.Duration;

/**
 * Service to interact with the OpenAI API for text summarization.
 * It handles the API key management (currently via environment variable)
 * and makes requests to the OpenAI completion endpoint.
 */
@Service
public class OpenAiService {

    private final OpenAiApiServiceSdk service; // The actual SDK service instance
    private final String apiKey;

    /**
     * Constructs the OpenAiService.
     * Initializes the OpenAI SDK service. It attempts to load the API key from the
     * "OPENAI_API_KEY" environment variable. If the key is not found, API calls
     * will likely fail or use a dummy key leading to errors.
     */
    public OpenAiService() {
        this.apiKey = System.getenv("OPENAI_API_KEY");

        if (this.apiKey == null || this.apiKey.trim().isEmpty()) {
            System.err.println("CRITICAL: OpenAI API key (OPENAI_API_KEY) is not set or is empty. " +
                               "The service will use a dummy key and will not be able to connect to OpenAI.");
            // Using a dummy key ensures the service field is initialized, but API calls will fail.
            this.service = new OpenAiApiServiceSdk("DUMMY_KEY_UNTIL_CONFIGURED", Duration.ofSeconds(30));
        } else {
            this.service = new OpenAiApiServiceSdk(this.apiKey, Duration.ofSeconds(30));
        }
    }

    /**
     * Summarizes the given text using the OpenAI API (specifically, a completion model like text-davinci-003).
     *
     * @param textToSummarize The text content to be summarized. Must not be null or empty.
     * @return A string containing the summary generated by OpenAI. If the API key is not configured
     *         or if an API error occurs, an error message or placeholder is returned.
     */
    public String summarizeText(String textToSummarize) {
        // Check if the API key was properly loaded and the service is not using the dummy token.
        if (apiKey == null || apiKey.trim().isEmpty() || "DUMMY_KEY_UNTIL_CONFIGURED".equals(this.service.getToken())) {
            System.err.println("OpenAI API key not configured. Returning placeholder summary.");
            // Provide a more informative placeholder if possible
            String preview = textToSummarize.length() > 50 ? textToSummarize.substring(0, 50) + "..." : textToSummarize;
            return "OpenAI API key not configured. Cannot summarize: \"" + preview + "\"";
        }

        try {
            // A simple prompt for summarization. More sophisticated prompt engineering can improve results.
            String prompt = "Summarize the following text concisely:\n\n\"" + textToSummarize + "\"\n\nSummary:";

            CompletionRequest completionRequest = CompletionRequest.builder()
                    .model("text-davinci-003") // A powerful model for completions, though older.
                                               // Consider "gpt-3.5-turbo-instruct" for a newer alternative.
                    .prompt(prompt)
                    .maxTokens(150)      // Maximum length of the summary. Adjust based on needs.
                    .temperature(0.5)    // Controls randomness: lower is more deterministic.
                    .n(1)                // Number of completions to generate.
                    .stop(null)          // Sequences where the API will stop generating further tokens.
                    .echo(false)         // Whether to echo the prompt back in the response.
                    .build();

            // The OpenAI SDK's createCompletion method might throw various exceptions.
            StringBuilder summaryBuilder = new StringBuilder();
            service.createCompletion(completionRequest).getChoices().forEach(choice -> {
                summaryBuilder.append(choice.getText());
            });

            return summaryBuilder.toString().trim();

        } catch (Exception e) {
            // Log the exception for server-side diagnostics.
            // In a production app, use a proper logging framework (e.g., SLF4J).
            System.err.println("Error calling OpenAI API for summarization: " + e.getMessage());
            // e.printStackTrace(); // For more detailed debugging if needed
            return "Error during summarization: Could not connect to or get a response from OpenAI API. (" + e.getMessage() + ")";
        }
    }
}
